import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message

TOKEN = "Token"

# –°–ø–∏—Å–∫–∏ —Å–ø–µ—Ü –æ—Ç–≤–µ—Ç–æ–≤
LOX = ["–¢—ã –ª–æ—Ö!", "—Ç—ã –ª–æ—Ö!"]
DURAK = ["–¢—ã –¥—É—Ä–∞–∫", "—Ç—ã –¥—É—Ä–∞–∫", "–¢–´ –î–£–†–ê–ö"]

async def reply_echo(message: Message) -> None:
    """–£–º–Ω—ã–π —ç—Ö–æ-–±–æ—Ç —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∑–∞—â–∏—Ç–æ–π"""
    text = message.text or "(–ø—É—Å—Ç–æ)"
    
    # —Å–ø–µ—Ü –∫–æ–º–∞–Ω–¥—ã
    if text == "–ø—Ä–∏–≤–µ—Ç":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø EchoBot! ü§ñ")
    elif text == "–ø–æ–∫–∞":
        await message.answer("–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã")
    elif text in LOX:
        await message.answer("–ù–µ—Ç —Ç—ã –ª–æ—Ö! üò§")
    elif text in DURAK:
        await message.answer("–ù–µ—Ç —Ç—ã –¥—É—Ä–∞–∫! üò§")
    else:
        # –æ–±—ã—á–Ω–æ–µ —ç—Ö–æ
        await message.answer(text)

async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = Bot(token=TOKEN)
    dp = Dispatcher()

    # –û—á–∏—â–∞–µ–º webhook
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("‚úÖ Webhook –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    dp.message.register(reply_echo)

    print("ü§ñ Smart Echo Bot –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
